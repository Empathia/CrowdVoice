<%
    infosidebarIsPresent = false
    if !@blocks.empty?
      if params[:tags].present? || params['all'].present?
        infosidebarIsPresent = true
      end
    end
 %>

<script type="text/template" id="timeline-deactivated">
  <li class="timeliner disactivated-timeliner" data-year="{{year}}">
    <a href="#" class="cv-dynamic-text-color">
      <span class="timerliner-dot"></span>
      <span class="year-label">
      <span class="inner-dot-icn"></span>
      <span class="year-text">{{year}}</span>
      </span>
    </a>
  </li>
</script>
<div class="sweeper panel-padding">

  <!--style type="text/css" class="posts-style">
    /*placeholder for dynamically calculated posts styles*/
    /* used by mediafeed_init.js/setPostsmeasures()*/
  </style-->

  <!-- infographics sidebar render only on POSTS WALL view -->
  <% if  infosidebarIsPresent && !is_mobile? %>
    <%= render :partial => "voices/info-sidebar" %>
  <% end %>


  <div class="voices-scroller scroll-primary <%= 'with-infosidebar' if infosidebarIsPresent %>" style="height: 1167px; width: 959px;">
    <div class="voices-container" style="width: 800px; overflow: hidden; position: relative; height: 564px;">
    </div>
  </div>

  <script type="text/javascript">
    $(window).load(function(){

      var protocol = window.location.protocol;

      <% if Rails.env.development? %>
        var socket = io.connect(protocol + '//localhost:9099');
      <% elsif Rails.env.production? %>
        if (window.location.hostname.search("myupdated.info") !== -1) {
          var socket = io.connect(protocol + '//ws.myupdated.info');  
        } else {
          var socket = io.connect(protocol + '//ws.crowdvoice.org');
        }
        
      <% end %>
      
      window.jsonResult = JSON.parse(<%= raw @response.to_json %>);
      
      CV.voicesContainer = new VoicesContainer({
        name     : 'voicesContainer',
        element  : $('.voices-container'),
        perPage  : <%= per_page = (is_mobile? ? Setting.posts_per_page_on_mobile : Setting.posts_per_page).to_i %>
      });

      
      CV.OverlaysController = new OverlaysController();

      var page = 0;

      var params = '?page=' + page;

      if ($.deparam.querystring().mod) {
          params += '&mod=1';
      }

      params += "&fetchAll=1";

      var fragment = document.createDocumentFragment();

      socket.on('connect', function() {
        console.log('socket connected');
      });

      if (!$.deparam.querystring().mod) {
        socket.emit('approved', {id : window.currentVoice.id});    
      } else {
        socket.emit('unapproved', {id : window.currentVoice.id});  
      }

      var postCounter = 0;
      
      socket.on('firstPage', function(data) {
        var fragment = document.createDocumentFragment();

        _.each(data.posts, function(post){
          
          CV.voicesContainer.preloadedVoices.push(post);

          var voice = new VoiceElement({
              name          : 'post_' + post.id,
              id            : post.id,
              image         : post.image,
              approved      : post.approved,
              description   : CV.getExcerpt(post.description, 250),
              imageWidth    : post.image_width,
              imageHeight   : post.image_height,
              negativeVotes : post.negative_votes_count,
              positiveVotes : post.positive_votes_count,
              overallScore  : post.overall_score,
              sourceService : post.source_service,
              sourceType    : post.source_type,
              sourceURL     : post.source_url,
              title         : post.title,
              voiceID       : post.voice_id,
              timeAgo       : post.created_at,
              createdAt     : post.created_at,
              service       : post.source_url,
              disabled      : true,
              active        : false,
              tags          : []
          });

          CV.voicesContainer.appendChild(voice);
          fragment.appendChild(voice.element);

          
          if (postCounter == 1) {
            CV.timeline.progress.activate();
          }
          postCounter++;
        });
        
        
        CV.voicesContainer.element.append(fragment);
          
        $('.placeholders').remove();
        CV.voicesContainer.element.find('.placeholder').remove();

        CV.voicesContainer.filteredResults = CV.voicesContainer.children;

        CV.voicesContainer.enableNextPage(function(){
          CV.voicesContainer.element.isotope('layout'); 
          CV.timeline.update();
          $('.filters-and-mode').find('input').attr('disabled', true);
        });

        if ((data.page + 1) <= data.pages) {
          if (!$.deparam.querystring().mod) {
            socket.emit('nextApproved', {
              id : window.currentVoice.id,
              page : data.page + 1,
              pages : data.pages
            });
          } else {
            socket.emit('nextUnapproved', {
              id : window.currentVoice.id,
              page : data.page + 1,
              pages : data.pages
            });
          }
        }
      });


      socket.on('page', function(data){
        var fragment = document.createDocumentFragment();

        CV.voicesContainer.preloadedVoices.concat(data.posts);

        _.each(data.posts, function(post){
          
          CV.voicesContainer.preloadedVoices.push(post);

          var voice = new VoiceElement({
              name          : 'post_' + post.id,
              id            : post.id,
              image         : post.image,
              approved      : post.approved,
              description   : CV.getExcerpt(post.description, 250),
              imageWidth    : post.image_width,
              imageHeight   : post.image_height,
              negativeVotes : post.negative_votes_count,
              positiveVotes : post.positive_votes_count,
              overallScore  : post.overall_score,
              sourceService : post.source_service,
              sourceType    : post.source_type,
              sourceURL     : post.source_url,
              title         : post.title,
              voiceID       : post.voice_id,
              timeAgo       : post.created_at,
              createdAt     : post.created_at,
              service       : post.source_url,
              disabled      : true,
              active        : false,
              tags          : []
          });

          CV.voicesContainer.appendChild(voice);
          fragment.appendChild(voice.element);

        });
        CV.timeline.update();

        CV.voicesContainer.filteredResults = CV.voicesContainer.children;

        CV.voicesContainer.element.append(fragment);

        if ((data.page + 1) <= data.pages) {
          if (!$.deparam.querystring().mod) {
            socket.emit('nextApproved', {
              id : window.currentVoice.id,
              page : data.page + 1,
              pages : data.pages
            });
          } else {
            socket.emit('nextUnapproved', {
              id : window.currentVoice.id,
              page : data.page + 1,
              pages : data.pages
            })
          }
        } else {
          CV.timeline.progress.deactivate();
          CV.timeline.update();
          

          CV.voicesContainer.filteredResults = CV.voicesContainer.children;

          CV.voicesContainer.checkURLToShowOverlay().checkVotedVoices();

          CV.mediaFeedSearch = new MediaFeedSearch({
            element : $('.filters-and-mode')
          });

          $('.filters-and-mode').find('input').attr('disabled', false);  
        }
      });

      
      CV.voicesContainer.page = page;


      socket.on('finished', function(data) {
        
      });
    });
  </script>