<%
    infosidebarIsPresent = false
    if !@blocks.empty?
      if params[:tags].present? || params['all'].present?
        infosidebarIsPresent = true
      end
    end
 %>

<script type="text/template" id="timeline-deactivated">
  <li class="timeliner disactivated-timeliner" data-year="{{year}}">
    <a href="#" class="cv-dynamic-text-color">
      <span class="timerliner-dot"></span>
      <span class="year-label">
      <span class="inner-dot-icn"></span>
      <span class="year-text">{{year}}</span>
      </span>
    </a>
  </li>
</script>
<div class="sweeper panel-padding">

  <!--style type="text/css" class="posts-style">
    /*placeholder for dynamically calculated posts styles*/
    /* used by mediafeed_init.js/setPostsmeasures()*/
  </style-->

  <!-- infographics sidebar render only on POSTS WALL view -->
  <% if  infosidebarIsPresent && !is_mobile? %>
    <%= render :partial => "voices/info-sidebar" %>
  <% end %>


  <div class="voices-scroller scroll-primary <%= 'with-infosidebar' if infosidebarIsPresent %>" style="height: 1167px; width: 959px;">
    <div class="voices-container" style="width: 800px; overflow: hidden; position: relative; height: 564px;">
      <div class="placeholders">
      
      </div>
    </div>
  </div>

  <script type="text/javascript">
    $(document).ready(function(){

      <% if Rails.env.development? %>
        var socket = io.connect('http://localhost:9099');
      <% elsif Rails.env.production? %>
        if (window.location.hostname === "myupdated.info") {
          var socket = io.connect('http://ws.myupdated.info');  
        } else {
          var socket = io.connect('http://ws.crowdvoice.org');
        }
        
      <% end %>
      
      window.jsonResult = JSON.parse(<%= raw @response.to_json %>);
      
      CV.voicesContainer = new VoicesContainer({
        name     : 'voicesContainer',
        element  : $('.voices-container'),
        perPage  : <%= per_page = (is_mobile? ? Setting.posts_per_page_on_mobile : Setting.posts_per_page).to_i %>
      });

      var iteration = 1;
      var placeholderInterval = setInterval(function() {
        if ($('.voices-container .placeholder').length >= 12) {
          $('.voices-container').html('')
        }

        if (iteration > 3) {
          iteration = 1;
        }

        var options = {};

        switch (iteration) {
          case 1:
            options.width = "180px"
            options.height = "269px"
            break;
          case 2:
            options.width = "180px"
            options.height = "379px"
            break;
          case 3:
            options.width = "180px"
            options.height = "419px"
            break;
        }

        var element = $('<div class="voice-box placeholder" style="width:' + options.width + ';height:' + options.height + ';"> <img src="/images/cv-placeholder-0' + iteration +'.gif" style="" /></div>')
        $('.voices-container').append(element);

        CV.voicesContainer.element.isotope('appended', element);
        CV.voicesContainer.element.isotope('layout');
        
        iteration++
      }, 350);



      CV.OverlaysController = new OverlaysController();

      var page = 0;

      var params = '?page=' + page;

      if ($.deparam.querystring().mod) {
          params += '&mod=1';
      }

      params += "&fetchAll=1";

      var fragment = document.createDocumentFragment();

      socket.on('connect', function() {
        console.log('connect');
      });

      // var mode = $.deparam.querystring().mod ? 'approved' : 'unapproved';

      if (!$.deparam.querystring().mod) {
        socket.emit('approved', {id : window.currentVoice.id});    
      } else {
        socket.emit('unapproved', {id : window.currentVoice.id});  
      }

      

      var postCounter = 0;

      var fragment = document.createDocumentFragment();
      socket.on('posts-data', function(data) {
        var post = data.value;
        CV.voicesContainer.preloadedVoices.push(post);

        var voice = new VoiceElement({
            name          : 'post_' + post.id,
            id            : post.id,
            image         : post.image,
            approved      : post.approved,
            description   : CV.getExcerpt(post.description, 250),
            imageWidth    : post.image_width,
            imageHeight   : post.image_height,
            negativeVotes : post.negative_votes_count,
            positiveVotes : post.positive_votes_count,
            overallScore  : post.overall_score,
            sourceService : post.source_service,
            sourceType    : post.source_type,
            sourceURL     : post.source_url,
            title         : post.title,
            voiceID       : post.voice_id,
            timeAgo       : post.created_at,
            createdAt     : post.created_at,
            service       : post.source_url,
            disabled      : true,
            active        : false,
            tags          : []
        });

        CV.voicesContainer.appendChild(voice);
        fragment.appendChild(voice.element);

        if (postCounter == 60) {
          CV.voicesContainer.element.append(fragment);
          fragment = document.createDocumentFragment();
        };
        

        if (postCounter == 1) {
          CV.timeline.progress.activate();
        }

        postCounter++;
        
      });

      socket.on('firstPageFinished', function() {
        console.log('firstPageFinished')
        clearInterval(placeholderInterval);
        $('.placeholders').remove();
        CV.voicesContainer.element.find('.placeholder').remove();

        CV.voicesContainer.filteredResults = CV.voicesContainer.children;

        CV.voicesContainer.enableNextPage(function(){
          CV.voicesContainer.element.isotope('layout'); 
          CV.timeline.update();
          // setTimeout(function(){
             
          // }, 500);
          $('.filters-and-mode').find('input').attr('disabled', true);
          
        });

      });

      socket.on('nextPage', function(){
        console.log('nextPage');
        CV.voicesContainer.filteredResults = CV.voicesContainer.children;
        CV.timeline.update();
      });

      
      CV.voicesContainer.page = page;


      socket.on('finished', function(data) {
        console.log('finished')
        CV.voicesContainer.element.append(fragment);
        CV.timeline.progress.deactivate();
        CV.timeline.update();
        

        CV.voicesContainer.filteredResults = CV.voicesContainer.children;

        CV.voicesContainer.checkURLToShowOverlay().checkVotedVoices();

        CV.mediaFeedSearch = new MediaFeedSearch({
          element : $('.filters-and-mode')
        });

        $('.filters-and-mode').find('input').attr('disabled', false);
      });
    });
  </script>