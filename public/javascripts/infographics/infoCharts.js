// Generated by CoffeeScript 1.4.0
// (function() {

Class('InfoChart')({
	prototype: {
		init: function(element, data, sidebar) {
		var chartMargin, chartSize, tooltipW,
			_this		= this;
			this.el		= element;
			this.data	= data;
			$(this.el).addClass('high-chart');
			chartMargin = 10;
			this.sidebar = sidebar;
			switch (this.data.layout) {
				case 'chart-top':
					chartSize = {
						w: 220,
						h: 100
					};
					break;
				case 'chart-bottom':
					chartSize = {
						w: 220,
						h: 100
					};
					break;
			}
			if (this.data.type === 'chart-radial') {
				chartMargin = 0;
				switch (this.data.layout) {
					case 'chart-top':
						chartSize = {
							w: 140,
							h: 140
						};
						break;
					case 'chart-bottom':
						chartSize = {
							w: 140,
							h: 140
						};
						break;
					case 'chart-left':
						chartSize = {
							w: 90,
							h: 90
						};
						break;
					}
				}
				if (this.data.type === 'chart-hbars') {
					chartSize = {
						w: 220,
						h: 30 + (this.data.chartData.values[0].data.length * 17)
					};
				}
				if (sidebar) {
					switch (this.data.layout) {
						case 'chart-top':
							chartSize = {
								w: 80,
								h: 50
							};
							break;
						case 'chart-bottom':
							chartSize = {
								w: 80,
								h: 50
							};
							break;
					}
					if (this.data.type === 'chart-radial') {
						chartMargin = 0;
						switch (this.data.layout) {
							case 'chart-top':
								chartSize = {
									w: 50,
									h: 50
								};
								break;
							case 'chart-bottom':
								chartSize = {
									w: 50,
									h: 50
								};
								break;
							case 'chart-left':
								chartSize = {
									w: 50,
									h: 50
								};
								break;
						}
					}
					if (this.data.type === 'chart-hbars') {
						chartSize = {
							w: 80,
							h: 30 + (this.data.chartData.values[0].data.length * 9)
						};
					}
				}
		
				tooltipW = chartSize.w - 10;
				this.chartsConfig = {
					chart: {
						renderTo: this.el,
						backgroundColor: 'rgba(255, 255, 255, 0.0)',
						borderColor: 'rgba(255, 255, 255, 0.0)',
						borderWidth: 0,
						shadow: false,
						spacingLeft: chartMargin,
						spacingTop: chartMargin,
						spacingRight: chartMargin,
						spacingBottom: chartMargin,
						width: chartSize.w,
						height: chartSize.h,
						events: {
							load: function(ev) {
								if ($('.info-sidebar').length) {
									$('.info-sidebar').data('neon').reportLoad('chart');
								}
								if ($('.infobox-wall-container').length) {
									return $('.infobox-wall-container').data('neon').reportLoad('chart');
								}
							}
						},
						style: {
							overflow: 'visible'
						}
					},
					tooltip: {
						enabled: !sidebar,
						backgroundColor: 'rgba(0,0,0, 0.9)',
						shadow: false,
						borderRadius: 1,
						borderWidth: 0,
						positioner: function(w, h, p) {
							var pos;
							pos = {
								x: p.plotX,
								y: p.plotY
							};
							if (pos.x + w > chartSize.w) {
								pos.x = pos.x - ((pos.x + w + 5) - chartSize.w);
							}
							if (pos.y + h > chartSize.h) {
								pos.y = pos.y - ((pos.y + h + 5) - chartSize.h);
							}
							return pos;
						},
						style: {
							width: tooltipW,
							whiteSpace: 'normal'
						}
					},
					plotOptions: {
						series: {
							states: {
								hover: {
									enabled: !sidebar
								}
							},
							marker: {
								enabled: false,
								lineColor: 'rgba(0,0,0, 0.9)',
								states: {
									hover: {
										enabled: true
									}
								}
							}
						}
					},
					credits: {
						enabled: false
					},
					title: {
						text: null
					},
					subtitle: {
						text: null
					},
					legend: {
						enabled: false
					}
				};
				switch (data.type) {
					case 'chart-radial':
						this.buildRadial();
						break;
					case 'chart-area':
						this.buildArea();
						break;
					case 'chart-hbars':
						this.buildHBars();
						break;
				}
				return this.chartInstance;
			},
		buildRadial: function() {
			var chartRadialConfig, chartValues, fullConfig, that;
			that = this;
			chartRadialConfig = {
				plotOptions: {
					pie: {
					size: '100%',
					borderWidth: 0,
					dataLabels: {
						enabled: false
					},
					shadow: false,
					animation: false
					}
				},
				tooltip: {
					formatter: function() {
						var text;
						return text = '<span style="color: #939393">' + this.key + ': </span>' + '<span style="color: #B7B7B7">' + this.y + '</span>';
					}
				}
			};
			chartValues = {
				colors: this.data.chartData.colors,
				series: [
					{
						type: 'pie',
						legend: {
							enabled: false
						},
						data: this.data.chartData.values[0].data,
						innerSize: '65%'
					}
				]
			};
			fullConfig = $.extend(true, this.chartsConfig, chartRadialConfig, chartValues);
			return this.chartInstance = new Highcharts.Chart(fullConfig);
		},
		buildArea: function() {
			var chartAreaConfig, chartValues, fullConfig, that;
			that = this;
			chartAreaConfig = {
				chart: {
					type: 'area',
					spacingLeft: 0
				},
				plotOptions: {
					area: {
						size: '100%',
						fillOpacity: 0.6,
						lineWidth: 0,
						dataLabels: {
							enabled: false
						},
						shadow: false,
						animation: false,
						cropThreshold: 0
					}
				},
				yAxis: {
					title: null,
					gridLineWidth: 0,
					offset: 0
				},
				xAxis: {
					enabled: true,
					minPadding: 0,
					maxPadding: 0,
					title: null,
					labels: {
						formatter: function() {
							return String.fromCharCode(this.value + 65);
						}
					},
					lineWidth: 0,
					tickColor: 'rgba(255, 255, 255, 0.0)',
					min: 0,
					max: this.data.chartData.xAxis.length - 1,
					tickInterval: 1
				},
				tooltip: {
					formatter: function() {
						var text;
						return text = '<span style="color: #939393">' + that.data.chartData.xAxis[this.x] + ': </span>' + '<span style="color: #B7B7B7">' + this.y + '</span>';
					},
					shared: false
				}
			};
			if (this.data.chartData.yAxis.max != null) {
				$.extend(true, chartAreaConfig, {
					yAxis: {
						min: 0,
						max: this.data.chartData.yAxis.max
					}
				});
			}
			if (this.sidebar) {
				$.extend(true, chartAreaConfig, {
					yAxis: {
						labels: {
							enabled: false
						}
					},
					xAxis: {
						labels: {
							enabled: false
						}
					}
				});
			}
			chartValues = {
				colors: this.data.chartData.colors,
				series: this.data.chartData.values
			};
			fullConfig = $.extend(true, this.chartsConfig, chartAreaConfig, chartValues);
			return this.chartInstance = new Highcharts.Chart(fullConfig);
		},
		buildHBars: function() {
			var chartAreaConfig, chartValues, fullConfig;
			chartAreaConfig = {
				chart: {
					type: 'bar'
				},
				plotOptions: {
					bar: {
						size: '100%',
						borderWidth: 0,
						borderRadius: 7,
						groupPadding: 0.09,
						pointPadding: 0.0,
						dataLabels: {
							enabled: false
						},
						shadow: false,
						animation: false,
						colorByPoint: true
					}
				},
				yAxis: {
					title: null,
					gridLineWidth: 0,
					labels: {
						x: 5,
						align: 'right'
					}
				},
				xAxis: {
					title: null,
					labels: {
						enabled: false
					},
					lineWidth: 0,
					tickColor: 'rgba(255, 255, 255, 0.0)'
				},
				tooltip: {
					formatter: function() {
						var text;
						return text = '<span style="color: #939393">' + this.key + ': ' + '<span style="color: #B7B7B7">' + this.y + '</span></span>';
					}
				}
			};
			if (this.data.chartData.yAxis.max != null) {
				$.extend(true, chartAreaConfig, {
					yAxis: {
						min: 0,
						max: this.data.chartData.yAxis.max
					}
				});
			}
			if (this.sidebar) {
				$.extend(true, chartAreaConfig, {
					yAxis: {
						labels: {
							enabled: false
						}
					},
					xAxis: {
						labels: {
							enabled: false
						}
					},
					plotOptions: {
						bar: {
							borderRadius: 5
						}
					}
				});
			}
			chartValues = {
				colors: this.data.chartData.colors,
				series: this.data.chartData.values
			};
			fullConfig = $.extend(true, this.chartsConfig, chartAreaConfig, chartValues);
			return this.chartInstance = new Highcharts.Chart(fullConfig);
		}
	}
});

// }).call(this);
