// Generated by CoffeeScript 1.4.0
(function() {

  Class('InfoChartDataEditor')({
    prototype: {
      init: function(element, type, initData) {
        this.element = typeof element === 'string' ? $(element) : element;
        this.type = type;
        this.element.find('.grid-placeholder').html('').append(this.element.find('.data-grid-template').html());
        this.maxGridSize = 200;
        this.valid = false;
        this.voiceColors = voiceColors;
        this.rowTitles = this.element.find('.series-data');
        this.rowTitleColorTmpl = this.element.find('.data-row-template').html();
        this.colTitles = this.element.find('.col-titles');
        this.colTitleTmpl = this.element.find('.col-title-template').html();
        this.dataGrid = this.element.find('.series-rows');
        this.dataRowTmpl = this.element.find('.row-data-template').html();
        this.dataTmpl = this.element.find('.data-template').html();
        this.gridScroll = this.element.find('.series-rows-container');
        this.colScroll = this.element.find('.col-titles-container');
        this.rowScroll = this.rowTitles;
        this.colMask = this.element.find('.col-titles-mask');
        this.addRow = this.element.find('.add-row');
        this.addCol = this.element.find('.add-col');
        this.rangeMin = this.element.find('.from-to input.from');
        this.rangeMax = this.element.find('.from-to input.to');
        this.layout = this.element.find('.chart-layout');
        switch (this.type) {
          case 'chart-radial':
            this.setupRadial();
            break;
          case 'chart-hbars':
            this.setupHBars();
            break;
          case 'chart-area':
            this.setupArea();
        }
        this.setAutoColors();
        this.fillAutoColors();
        this.setSizes();
        this.bindEvents();
        if (initData) {
          this.initData = initData;
          this.setupEditMode();
        }
        this.element.show();
        return this["this"];
      },
      setAutoColors: function() {
        this.autoColors = this.element.find('.color-check').prop('checked', true);
        this.rowTitles.find('.color').prop('disabled', true).addClass('disabled');
        return this.useAutoColors = true;
      },
      fillAutoColors: function() {
        var k,
          _this = this;
        k = 0;
        return this.rowTitles.find('.color').each(function(i, el) {
          $(el).val(_this.voiceColors[k]);
          k++;
          if (k === _this.voiceColors.length) {
            return k = 0;
          }
        });
      },
      loadContent: function() {},
      bindEvents: function() {
        var that,
          _this = this;
        that = this;
        this.addCol.click(function() {
          return _this.addColumn();
        });
        this.addRow.click(function() {
          return _this.addSerie();
        });
        this.gridScroll.scroll(function(e) {
          _this.colScroll.scrollLeft(_this.gridScroll.scrollLeft());
          return _this.rowScroll.scrollTop(_this.gridScroll.scrollTop());
        });
        this.colTitles.delegate('.remove-col', 'click', function() {
          var colToRemove;
          colToRemove = $(this).parent('.col-title').remove().attr('data-col');
          that.gridScroll.find("[data-col=\"" + colToRemove + "\"]").remove();
          that.setSizes();
          that.resetGridCoords();
          return that.element.trigger('change');
        });
        this.rowTitles.delegate('.remove-row', 'click', function() {
          var rowToRemove;
          rowToRemove = $(this).parent('.data-row').remove().attr('data-row');
          that.gridScroll.find("[data-row=\"" + rowToRemove + "\"]").remove();
          that.setSizes();
          that.resetGridCoords();
          if (that.useAutoColors) {
            that.fillAutoColors();
          }
          return that.element.trigger('change');
        });
        return this.autoColors.change(function() {
          if (_this.autoColors.prop('checked')) {
            return _this.enableAutoColors();
          } else {
            return _this.disableAutoColors();
          }
        });
      },
      enableAutoColors: function() {
        this.rowTitles.find('.color').prop('disabled', true).addClass('disabled');
        this.useAutoColors = true;
        return this.fillAutoColors();
      },
      disableAutoColors: function() {
        this.rowTitles.find('.color').prop('disabled', false).removeClass('disabled');
        return this.useAutoColors = false;
      },
      addColumn: function(name) {
        var colName, that;
        that = this;
        colName = $(this.colTitleTmpl);
        if (name != null) {
          colName.find('.col-name').val(name);
        }
        this.colTitles.append(colName);
        this.dataGrid.children().each(function() {
          return $(this).append(that.dataTmpl);
        });
        this.setSizes();
        this.resetGridCoords();
        return this.element.trigger('change');
      },
      addSerie: function(name, color) {
        var i, newRow, that, title, _i, _len, _ref;
        that = this;
        title = $(this.rowTitleColorTmpl);
        if (this.useAutoColors) {
          title.find('.color').prop('disabled', true).addClass('disabled');
        }
        if (name != null) {
          title.find('input.name').val(name);
          title.find('input.color').val(color);
        }
        this.rowTitles.append(title);
        if (this.useAutoColors) {
          this.fillAutoColors();
        }
        newRow = $(this.dataRowTmpl);
        _ref = this.colTitles.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          newRow.append(this.dataTmpl);
        }
        this.dataGrid.append(newRow);
        this.setSizes();
        this.resetGridCoords();
        return this.element.trigger('change');
      },
      setSizes: function() {
        var columns, colwidth, totalWidth;
        columns = this.colTitles.children().length;
        colwidth = this.colTitles.children(':eq(0)').width();
        totalWidth = columns * colwidth;
        this.colTitles.width(totalWidth);
        this.dataGrid.children().each(function() {
          return $(this).width(totalWidth);
        });
        if (totalWidth > this.maxGridSize) {
          this.colScroll.width(this.maxGridSize);
          return this.colMask.width(this.maxGridSize);
        } else {
          this.colScroll.width(totalWidth);
          return this.colMask.width(totalWidth);
        }
      },
      resetGridCoords: function() {
        this.colTitles.children().each(function(i, el) {
          $(this).find('.col-order').html(String.fromCharCode(i + 65));
          return $(this).attr('data-col', i);
        });
        this.rowTitles.children().each(function(i, el) {
          return $(this).attr('data-row', i);
        });
        this.dataGrid.children().each(function(i, el) {
          return $(this).attr('data-row', i).children().each(function(j, el) {
            return $(this).attr('data-row', i).attr('data-col', j);
          });
        });
        if (this.type === 'chart-area') {
          if (this.colTitles.children().length === 26) {
            return this.addCol.hide();
          } else {
            return this.addCol.show();
          }
        }
      },
      setupRadial: function() {
        var firstRowTitle, firtsColTitle;
        this.addCol.hide();
        firtsColTitle = $(this.colTitleTmpl).addClass('first');
        firtsColTitle.find('.remove-col').remove();
        this.colTitles.append(firtsColTitle);
        this.colMask.hide();
        this.element.find('.values-label').show();
        firstRowTitle = $(this.rowTitleColorTmpl).addClass('first');
        firstRowTitle.find('.remove-row').remove();
        this.rowTitles.append(firstRowTitle);
        this.dataGrid.append($(this.dataRowTmpl).append(this.dataTmpl));
        return this.resetGridCoords();
      },
      setupHBars: function() {
        this.setupRadial();
        this.layout.find('[value="chart-left"]').remove();
        return this.element.find('.from-to').show();
      },
      setupArea: function() {
        var firstRowTitle, firtsColTitle;
        this.element.find('.from-to').show();
        firtsColTitle = $(this.colTitleTmpl).addClass('first');
        firtsColTitle.find('.remove-col').remove();
        this.colTitles.append(firtsColTitle);
        firstRowTitle = $(this.rowTitleColorTmpl).addClass('first');
        firstRowTitle.find('.remove-row').remove();
        this.rowTitles.append(firstRowTitle);
        this.dataGrid.append($(this.dataRowTmpl).append(this.dataTmpl));
        this.layout.find('[value="chart-left"]').remove();
        return this.resetGridCoords();
      },
      getData: function() {
        var area, bar, el, elRow, hbars, i, input, k, radial, result, row, slice, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
        result = {
          chartData: {
            yAxis: {},
            xAxis: [],
            labels: [],
            colors: []
          },
          layout: ''
        };
        switch (this.type) {
          case 'chart-radial':
            radial = [];
            _ref = this.rowTitles.children();
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              el = _ref[i];
              slice = [];
              input = this.dataGrid.find(".data[data-row=\"" + i + "\"][data-col=\"0\"]");
              if (parseInt(input.val()) > 0 || parseInt(input.val()) < 0) {
                input.removeClass('error');
                this.valid = true;
              } else {
                input.addClass('error');
                this.valid = false;
              }
              slice[0] = $(el).find('.name').val();
              slice[1] = parseFloat(input.val());
              radial.push(slice);
              result.chartData.labels.push($(el).find('.name').val());
              result.chartData.colors.push($(el).find('.color').val());
            }
            result.chartData.values = [
              {
                data: radial
              }
            ];
            break;
          case 'chart-hbars':
            hbars = [
              {
                data: []
              }
            ];
            _ref1 = this.rowTitles.children();
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              el = _ref1[i];
              bar = [];
              input = this.dataGrid.find(".data[data-row=\"" + i + "\"][data-col=\"0\"]");
              if (parseInt(input.val()) > 0 || parseInt(input.val()) < 0) {
                input.removeClass('error');
                this.valid = true;
              } else {
                input.addClass('error');
                this.valid = false;
              }
              val = parseFloat(input.val());
              bar[0] = $(el).find('.name').val();
              bar[1] = val;
              hbars[0].data.push(bar);
              result.chartData.labels.push($(el).find('.name').val());
              result.chartData.colors.push($(el).find('.color').val());
            }
            result.chartData.values = hbars;
            if (this.rangeMax.val() !== '') {
              result.chartData.yAxis = {
                max: parseInt(this.rangeMax.val())
              };
            }
            break;
          case 'chart-area':
            area = [];
            _ref2 = this.rowTitles.children();
            for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
              elRow = _ref2[i];
              row = (function() {
                var _l, _len3, _ref3, _results;
                _ref3 = this.colTitles.children();
                _results = [];
                for (k = _l = 0, _len3 = _ref3.length; _l < _len3; k = ++_l) {
                  el = _ref3[k];
                  input = this.dataGrid.find(".data[data-row=\"" + i + "\"][data-col=\"" + k + "\"]");
                  if (parseFloat(input.val()) > 0 || parseInt(input.val()) < 0) {
                    input.removeClass('error');
                    this.valid = true;
                  } else {
                    input.addClass('error');
                    this.valid = false;
                  }
                  _results.push(parseInt(input.val()));
                }
                return _results;
              }).call(this);
              area.push({
                data: row
              });
              result.chartData.labels.push($(elRow).find('.name').val());
              result.chartData.colors.push($(elRow).find('.color').val());
            }
            result.chartData.values = area;
            if (this.rangeMax.val() !== '') {
              result.chartData.yAxis = {
                max: parseInt(this.rangeMax.val())
              };
            }
            _ref3 = this.colTitles.children();
            for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
              el = _ref3[i];
              result.chartData.xAxis.push($(el).find('.col-name').val());
            }
        }
        result.layout = this.layout.val();
        return result;
      },
      setupEditMode: function() {
        var i, k, name, row, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
        this.autoColors.prop('checked', false);
        this.disableAutoColors();
        this.rangeMin.val(this.initData.chartData.yAxis.min);
        this.rangeMax.val(this.initData.chartData.yAxis.max);
        _ref = this.initData.chartData.xAxis;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          name = _ref[i];
          if (i === 0) {
            this.colTitles.find('.col-name').val(name);
          } else {
            this.addColumn(name);
          }
        }
        _ref1 = this.initData.chartData.labels;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          name = _ref1[i];
          if (i === 0) {
            this.rowTitles.find('input.name').val(name);
            this.rowTitles.find('input.color').val(this.initData.chartData.colors[i]);
          } else {
            this.addSerie(name, this.initData.chartData.colors[i]);
          }
        }
        if (this.initData.type === 'chart-radial' || this.initData.type === 'chart-hbars') {
          _ref2 = this.initData.chartData.values[0].data;
          for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
            value = _ref2[i];
            this.dataGrid.find(".data[data-row=\"" + i + "\"][data-col=\"0\"]").val(value[1]);
          }
        } else {
          _ref3 = this.initData.chartData.values;
          for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
            row = _ref3[i];
            _ref4 = row.data;
            for (k = _m = 0, _len4 = _ref4.length; _m < _len4; k = ++_m) {
              value = _ref4[k];
              this.dataGrid.find(".data[data-row=\"" + i + "\"][data-col=\"" + k + "\"]").val(value);
            }
          }
        }
        return this.layout.val(this.initData.layout);
      }
    }
  });

}).call(this);
