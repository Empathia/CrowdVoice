// Generated by CoffeeScript 1.4.0
(function() {

  Class('InfoEditor')({
    prototype: {
      init: function(element, initData) {
        this.element = typeof element === 'string' ? $(element) : element;
        this.headLine = this.element.find('#block_name').val('');
        this.description = this.element.find('#block_description').val('');
        this.tags = this.element.find('#block_tag_list').tokenInput(voiceAutocompleteUrl, {
          theme: "facebook"
        });
        this.contentType = this.element.find('#block_type').val('none');
        this.saveButton = this.element.find('.save-changes');
        this.featuredCheck = this.element.find('.featured-check').prop('checked', false);
        this.chartUnits = this.element.find('.units').val('');
        this.sources = this.element.find('#block_sources').val('');
        this.tips = $('.infobox-tips');
        this.tipsToggle = this.tips.find('.tips-toggle');
        this.tipsBody = this.tips.find('.tips-body');
        this.subForms = {};
        this.subForms['chart'] = this.element.find('.chart-data');
        this.subForms['clipart-image'] = this.element.find('.clipart-image');
        this.subForms['custom-image'] = this.element.find('.custom-image');
        this.subForms['number'] = this.element.find('.number');
        this.subForms['number-clipart'] = this.element.find('.number-clipart');
        this.subForms['number-custom-image'] = this.element.find('.number-custom-image');
        this.preview = this.element.find('.infobox-preview-container');
        this.backForm = $('.back-form');
        this.backName = this.backForm.find('.back-name');
        this.backData = this.backForm.find('.back-data');
        this.backTags = this.backForm.find('.back-tags');
        _.each(this.subForms, function(el) {
          return el.hide();
        });
        this.bindEvents();
        if (initData) {
          this.initData = initData;
          return this.setupEditMode();
        }
      },
      bindEvents: function() {
        var debouncedCall, that,
          _this = this;
        that = this;
        this.tipsToggle.toggle(function() {
          _this.tipsToggle.find('.plus-minus').html('-');
          return _this.tips.animate({
            width: '95%'
          }, function() {
            return _this.tipsBody.slideDown();
          });
        }, function() {
          _this.tipsToggle.find('.plus-minus').html('+');
          return _this.tipsBody.slideUp(function() {
            return _this.tips.animate({
              width: '12%'
            });
          });
        });
        this.contentType.change(function() {
          var selected;
          selected = $(this).val();
          _.each(that.subForms, function(el) {
            return el.hide();
          });
          that.chartData = null;
          that.clipartData = null;
          that.customImagetData = null;
          that.numbertData = null;
          if (selected.indexOf('chart-') !== -1) {
            return that.chartData = new InfoChartDataEditor(that.element.find('.chart-data'), selected);
          } else {
            switch (selected) {
              case 'clipart-image':
                return that.clipartData = new InfoClipartGallery(that.element.find('.clipart-image'), false, false);
              case 'custom-image':
                return that.customImagetData = new InfoCustomImage(that.element.find('.custom-image'), false, false);
              case 'number':
                return that.numbertData = new InfoNumber(that.element.find('.number'), false, false);
              case 'number-clipart':
                that.clipartData = new InfoClipartGallery(that.element.find('.clipart-image'), false, true);
                return that.numbertData = new InfoNumber(that.element.find('.number'), false, true);
              case 'number-custom-image':
                that.customImagetData = new InfoCustomImage(that.element.find('.custom-image'), false, true);
                return that.numbertData = new InfoNumber(that.element.find('.number'), false, true);
            }
          }
        });
        this.saveButton.click(function() {
          return _this.saveInfobox();
        });
        debouncedCall = function(ev) {
          return _this.liveChange($(ev.target));
        };
        return this.element.delegate('input:not(#token-input-block_tag_list), textarea, select, .clipart-image, .custom-image, .chart-data', 'change keyup input paste infoEditorChange.clipart infoEditorChange.custom-image', $.debounce(200, debouncedCall));
      },
      setupEditMode: function() {
        var el, i, _i, _len, _ref;
        this.chartData = null;
        this.clipartData = null;
        this.customImagetData = null;
        this.numbertData = null;
        this.headLine.val(this.initData.headline);
        this.description.val(this.initData.description);
        this.chartUnits.val(this.initData.units);
        this.sources.val(this.initData.sources || '');
        if (this.initData.featured === 'highlight') {
          this.featuredCheck.prop('checked', true);
        }
        _ref = this.initData.tags;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          el = _ref[i];
          this.tags.tokenInput('add', {
            id: 0,
            name: el,
            preventDuplicates: true
          });
        }
        this.contentType.find("[value='" + this.initData.type + "']").attr('selected', true);
        if (this.initData.type.indexOf('chart-') !== -1) {
          this.chartData = new InfoChartDataEditor(this.element.find('.chart-data'), this.initData.type, this.initData);
        } else {
          switch (this.initData.type) {
            case 'clipart-image':
              this.clipartData = new InfoClipartGallery(this.element.find('.clipart-image'), this.initData, false);
              break;
            case 'custom-image':
              this.customImagetData = new InfoCustomImage(this.element.find('.custom-image'), this.initData, false);
              break;
            case 'number':
              this.numbertData = new InfoNumber(this.element.find('.number'), this.initData, false);
              break;
            case 'number-clipart':
              this.clipartData = new InfoClipartGallery(this.element.find('.clipart-image'), this.initData, true);
              this.numbertData = new InfoNumber(this.element.find('.number'), this.initData, true);
              break;
            case 'number-custom-image':
              this.customImagetData = new InfoCustomImage(this.element.find('.custom-image'), this.initData, true);
              this.numbertData = new InfoNumber(this.element.find('.number'), this.initData, true);
          }
        }
        return this.liveChange();
      },
      getData: function() {
        var content, infobox, tag, _i, _len, _ref;
        infobox = {
          id: 'ID',
          voiceID: 'VOICE_ID',
          voiceTheme: 'THEME',
          type: this.contentType.val(),
          order: 'POSITION',
          headline: this.headLine.val(),
          description: this.description.val(),
          units: this.chartUnits.val(),
          tags: [],
          sources: this.sources.val()
        };
        if (this.featuredCheck.is(':checked')) {
          infobox.featured = 'highlight';
        } else {
          infobox.featured = '';
        }
        _ref = this.tags.tokenInput("get");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          infobox.tags.push(tag.name);
        }
        content = {};
        if (infobox.type.indexOf('chart-') !== -1) {
          content = this.chartData.getData();
        } else {
          switch (infobox.type) {
            case 'clipart-image':
              content = this.clipartData.getData();
              break;
            case 'custom-image':
              content = this.customImagetData.getData();
              break;
            case 'number':
              content = this.numbertData.getData();
              break;
            case 'number-clipart':
              $.extend(content, this.clipartData.getData(), this.numbertData.getData());
              break;
            case 'number-custom-image':
              $.extend(content, this.customImagetData.getData(), this.numbertData.getData());
          }
        }
        return $.extend(infobox, content);
      },
      bindDynamicEvents: function() {
        var box, sourcesBack, sourcesScroll, sourcesShow, sourcesWrapper,
          _this = this;
        box = this.preview.find('.infobox');
        sourcesShow = box.find('.sources-open');
        sourcesBack = box.find('.sources-back');
        sourcesWrapper = box.find('.sources-list-wrapper');
        sourcesScroll = sourcesWrapper.find('.scroll');
        sourcesScroll.height(box.find('.info').height() - sourcesWrapper.find('.header').outerHeight()).jScrollPane({
          autoReinitialise: false,
          contentWidth: sourcesScroll.width()
        });
        sourcesShow.bind('click', function(e) {
          e.preventDefault();
          return sourcesWrapper.addClass('show');
        });
        return sourcesBack.bind('click', function(e) {
          e.preventDefault();
          return sourcesWrapper.removeClass('show');
        });
      },
      validate: function() {
        var validChart;
        validChart = true;
        if (this.headLine.val().length > 0) {
          this.headLine.removeClass('error');
        } else {
          this.headLine.addClass('error');
        }
        if (this.tags.tokenInput("get").length > 0) {
          $('.token-input-list-facebook').removeClass('error');
        } else {
          $('.token-input-list-facebook').addClass('error');
        }
        if (this.chartData != null) {
          if (this.chartData.valid) {
            validChart = true;
          } else {
            validChart = false;
          }
        }
        if (validChart && !this.headLine.hasClass('error') && !$('.token-input-list-facebook').hasClass('error')) {
          return true;
        } else {
          return false;
        }
      },
      saveInfobox: function() {
        var data, tag, tags;
        data = this.getData();
        if (data['type'] === 'clipart-image') {
          data['graphic'] = $("li[data-clipart-url='" + data['graphic'] + "']").attr('data-clipart-id');
        }
        this.backData.val(JSON.stringify(data));
        tags = (function() {
          var _i, _len, _ref, _results;
          _ref = this.tags.tokenInput("get");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(tag.name);
          }
          return _results;
        }).call(this);
        this.backTags.val(tags.join(','));
        this.backName.val(this.headLine.val());
        if (this.validate()) {
          return this.backForm.submit();
        }
      },
      liveChange: function(changedElement) {
        this.preview.find('.infobox-preview').html('');
        this.preview.find('.infobox-preview').html(new InfoBox(this.getData(), '.infobox-template').render());
        return this.bindDynamicEvents();
      }
    }
  });

}).call(this);
