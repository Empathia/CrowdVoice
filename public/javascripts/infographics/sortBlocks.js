// Generated by CoffeeScript 1.4.0
(function() {

  Class('sortBlocks')({
    prototype: {
      init: function(element) {
        this.element = typeof element === 'string' ? $(element) : element;
        // Component elements
        this.blockItems = this.element.find('.block-item');
        this.activeElement = this.element.find('.ui-sortable-helper');
        this.overlay = $(document).find('#overlay');
        this.sort();
        return this.buildSortable();
      },
      buildSortable: function() {
        var _this = this;
        this.element.sortable({
          items: this.blockItems,
          handle: '.sort-handler',
          axis: 'y',
          sort: function() {
            //flag current element
            return _this.element.find('.ui-sortable-helper').addClass('grabbed');
          },
          stop: function(e, ui) {
            //check if its first
            var currentRows = _this.element.find('.block-item'),
              infoboxId, newPos, url;
            // get item position index
            for (var i=0; i < currentRows.length; i++){
              if(currentRows[i] == ui.item[0]) {
                newPos = i;
              }
            }
            infoboxId = ui.item.attr('data-block-id');
            //voiceId rendered in blocks/index.html

            url = "/admin/voices/" + voiceId + "/blocks/" + infoboxId + "/reorder?pos=" + newPos;
            _this.updateBlockPosition(url);
            $('.grabbed').removeClass('grabbed');
            return _this.overlay.show();
          }
        });
        return this.element.disableSelection();
      },
      sort: function(){
        $('.block-item').each(function(i) {
          $(this).attr('id', i + 1);
        });
      },
      updateBlockPosition: function(url){
        var _this = this;
        $.get(url, function(data) {
          // reset position listing, can't use this.blockItems because it's filled at the
          // beggining with the pre-ordered items
          _this.sort();
          return _this.overlay.hide();
        }).error(function() {
          _this.element.sortable('cancel');
          return _this.overlay.hide();
        });
      }
    }
  });

}).call(this);
